var documenterSearchIndex = {"docs":
[{"location":"howto/#How-To","page":"How To","title":"How-To","text":"","category":"section"},{"location":"howto/#Connecting-to-a-remote-machine","page":"How To","title":"Connecting to a remote machine","text":"","category":"section"},{"location":"howto/","page":"How To","title":"How To","text":"Connecting to a remote machine goes via an SSH tunnel by default.","category":"page"},{"location":"howto/","page":"How To","title":"How To","text":"Ensure you have an ssh server running on your.host.example and can login normally using ssh. If you've got some particular credentials or ssh options needed for your.host, you'll probably find it convenient to set these up in your openSSH config file (~/.ssh/config on unix). For example,\nHost your.host.example\n    User ubuntu\n    IdentityFile ~/.ssh/some_identity\nStart a Julia process A on the server and call serve_repl(). Use @async serve_repl() if you'd like to run other work concurrently.\nStart a separate Julia process B on the client and call connect_repl(\"your.host.example\").","category":"page"},{"location":"howto/#Transfer-variables","page":"How To","title":"Transfer variables","text":"","category":"section"},{"location":"howto/","page":"How To","title":"How To","text":"Variable values can be transferred between server and client with the special syntax %put and %get:","category":"page"},{"location":"howto/","page":"How To","title":"How To","text":"Transfer a value from a variable x on the server and assign it to the name x on the client:\nremote> x = 42;\n\nremote> %put x\n42\n\njulia> x\n42\nTransfer a variable to the server under a new name\njulia> y = 101;\n\nremote> %get z = y\n101\nMore general expressions on the right and left hand sides also work:\nremote> x = [1,2];\n\nremote> %put y = x .+ 1\n2-element Vector{Int64}:\n 2\n 3\n\nremote> %put a,b = x\n2-element Vector{Int64}:\n 1\n 2","category":"page"},{"location":"howto/#Alternatives-to-SSH","page":"How To","title":"Alternatives to SSH","text":"","category":"section"},{"location":"howto/#AWS-Session-Manager","page":"How To","title":"AWS Session Manager","text":"","category":"section"},{"location":"howto/","page":"How To","title":"How To","text":"You can use AWS Session Manager instead of SSH to connect to remote hosts. To do this, first setup Session Manager for the EC2 instances you like. See the docs. Thereafter, install AWS CLI version 2 and then install the Session Manager plugin for AWS CLI on your local system.","category":"page"},{"location":"howto/","page":"How To","title":"How To","text":"Setup your AWS CLI by running aws configure on the command line. You can then connect to the RemoteREPL server on your EC2 instance with connect_repl(\"your-instance-id\"; tunnel=:aws, region=\"your-instance-region\"). The region argument is only required if the EC2 instance is not in the default region that your CLI was setup with.","category":"page"},{"location":"howto/#Kubernetes-kubectl","page":"How To","title":"Kubernetes kubectl","text":"","category":"section"},{"location":"howto/","page":"How To","title":"How To","text":"If kubectl is configured on your local system, you can use that to connect to RemoteREPL servers on your Kubernetes cluster. Run the following snippet: connect_repl(\"your-pod-name\"; tunnel=:k8s, namespace=\"your-namespace\"). The namespace argument is only required if the Pod is not in the default Kubernetes namespace.","category":"page"},{"location":"design/#Design","page":"Design","title":"Design","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"RemoteREPL formats results as text (using show(io, \"text/plain\", result)) for communication back to the client terminal. This is helpful because:","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"The result of a computation might be large, and it should be summarized before sending back.\nThe remote machine may be a separate application with different modules loaded; it may not be possible to deserialize the results in the local Julia session.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"Currently RemoteREPL uses the standard Serialization library to format messages on the wire, but this isn't bidirectionally compatible between Julia versions so we'll probably move to something else in the future.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#REPL-syntax","page":"Reference","title":"REPL syntax","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"RemoteREPL syntax is just normal julia REPL syntax with minor additions:","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"?expr produces help for expr. This is just like the normal REPL, but we don't have a separate help mode.\n%get lhs = rhs evaluates rhs on the client and assigns to lhs on the remote server.\n%put lhs = rhs evaluates rhs on the server and assigns to lhs on the client.\n%get x is shorthand for %get x = x, and similarly for %put.","category":"page"},{"location":"reference/#API-reference","page":"Reference","title":"API reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"connect_repl\nserve_repl\nRemoteREPL.remote_eval","category":"page"},{"location":"reference/#RemoteREPL.connect_repl","page":"Reference","title":"RemoteREPL.connect_repl","text":"connect_repl([host=localhost,] port::Integer=27754;\n             use_ssh_tunnel = (host != localhost),\n             ssh_opts = ``)\n\nConnect client REPL to a remote host on port. This is then accessible as a remote sub-repl of the current Julia session.\n\nFor security, connect_repl() uses an ssh tunnel for remote hosts. This means that host needs to be running an ssh server and you need ssh credentials set up for use on that host. For secure networks this can be disabled by setting tunnel=:none.\n\nTo provide extra options to SSH, you may use the ssh_opts keyword, for example an identity file may be set with  ssh_opts = -i pathtoidentitypem. Alternatively, you may want to set this up permanently using a Host section in your ssh config file.\n\nYou can also use the following technologies for tunneling in place of SSH:\n\nAWS Session Manager: set tunnel=:aws. The optional region keyword argument can be used to specify the AWS Region of your server.\nkubectl: set tunnel=:k8s. The optional namespace keyword argument can be used to specify the namespace of your Kubernetes resource.\n\nSee README.md for more information.\n\n\n\n\n\n","category":"function"},{"location":"reference/#RemoteREPL.serve_repl","page":"Reference","title":"RemoteREPL.serve_repl","text":"serve_repl([address=Sockets.localhost,] port=27754)\nserve_repl(server)\n\nStart a REPL server listening on interface address and port. In normal operation serve_repl() serves REPL clients indefinitely (ie., it does not return), so you will generally want to launch it using @async serve_repl() to do other useful work at the same time.\n\nIf you want to be able to stop the server you can pass an already-listening server object (the result of Sockets.listen()). The server can then be cancelled from another task using close(server) as necessary to control the server lifetime.\n\nSecurity\n\nserve_repl() uses an unauthenticated, unecrypted protocol so it should not be used on open networks or multi-user machines where other users aren't trused. For open networks, use the default address=Sockets.localhost and the automatic ssh tunnel support provided by the client-side connect_repl().\n\n\n\n\n\n","category":"function"},{"location":"reference/#RemoteREPL.remote_eval","page":"Reference","title":"RemoteREPL.remote_eval","text":"remote_eval(cmdstr)\nremote_eval(host, port, cmdstr)\n\nParse a string cmdstr, evaluate it in the remote REPL server's Main module, then close the connection.\n\nFor example, to cause the remote Julia instance to exit, you could use\n\nusing RemoteREPL\nRemoteREPL.remote_eval(\"exit()\")\n\n\n\n\n\n","category":"function"},{"location":"reference/#Security-considerations","page":"Reference","title":"Security considerations","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Note that any logged-in users on the client or server machines can execute arbitrary commands in the serve_repl() process. For this reason, you should avoid using RemoteREPL on shared infrastructure like compute clusters if you don't trust other users on the system. (In the future perhaps we can avoid this by forwarding between socket files?)","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"This package uses an SSH tunnel by default to forward traffic when host != Sockets.localhost, so it should be quite secure to use over an open network. If both client and server are on a secure network, it's possible to skip the tunnel to avoid setting up SSH. However, if anyone breaks into your network you'll be left with no security whatsoever.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"TLDR; this package aims to provide safe defaults for single-user machines. However, do not expose the RemoteREPL port to an open network. Abitrary remote code execution is the main feature provided by this package!","category":"page"},{"location":"#RemoteREPL.jl","page":"Overview","title":"RemoteREPL.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"RemoteREPL allows you to connect your local julia REPL to a separate Julia process and run commands interactively:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Run code in the Main module of a remote Julia process\nStandard REPL tab completion and help mode with ?\nTransfer variables between processes with %get and %put\nAutomatic ssh tunnel for network security. Reconnects dropped connections.","category":"page"},{"location":"#Demo","page":"Overview","title":"Demo","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"(Image: asciicast)","category":"page"},{"location":"tutorial/#Connecting-two-Julia-processes","page":"Tutorial","title":"Connecting two Julia processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's connect two separate Julia processes on the same machine. First start up a REPL server in process A. This will allow any number of external clients to connect:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> using RemoteREPL\n\njulia> @async serve_repl()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now start a separate Julia session B, connect to process A and execute some command:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> using RemoteREPL\n\njulia> connect_repl()\nREPL mode remote_repl initialized. Press > to enter and backspace to exit.\n\nremote> x = 123\n123","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Back in the REPL of process A you'll now see that a client has connected, and the variable x has been set in the Main module:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"┌ Info: REPL client opened a connection\n└   peer = (ip\"127.0.0.1\", 0xa68e)\n\njulia> x\n123","category":"page"},{"location":"tutorial/#Transfer-variables-between-client-and-server","page":"Tutorial","title":"Transfer variables between client and server","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Normally RemoteREPL shows you a string-based summary of variables, but the actual Julia values are held in the remote process. Sometimes it's useful to transfer these to the client to make use of graphical utilities like plotting or other resources which you need a local copy of the object for. This can be done with the RemoteREPL %get and %put syntax:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Transfer the value from a variable x on the server and assign it to the name x on the client. In process B from the previous tutorial, run","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"remote> y = 42;\n\nremote> %put y\n42","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now switching back to the local REPL (press backspace), you can see the value of y has been set locally.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> y\n42","category":"page"}]
}
